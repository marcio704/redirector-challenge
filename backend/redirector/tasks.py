import logging

from celery import shared_task

from .models import DomainRedirect, Domain

logger = logging.getLogger(__name__)


@shared_task(name="apps.healthcheck.tasks.celery_healthcheck")
def save_tracking_data(tracking_data: dict):
    """
    This task would be consuming tracking data from a SQS queue, the tracking data on this queue is generated by
    the Flask Lambda microservice before the request redirect (via DynamoDB async events after insertion).
    See: lambda/utils.save_tracking_data
    :param tracking_data: {
        'domain_name': <str>,
        'user_agent': <str>,
        'referer': <str>,
        'ip': <str>,
        'redirect_date': <str>,
    }
    :return:
    """
    logger.info(f"Saving tracking_data into backend database: {tracking_data}")

    domain = Domain.objects.get(name=tracking_data['domain_name'])

    DomainRedirect.objects.create(
        domain=domain,
        user_agent=tracking_data['user_agent'],
        referer=tracking_data['referer'],
        ip=tracking_data['ip'],
        redirect_date=tracking_data['redirect_date'],
    )
